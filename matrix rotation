int m,n,c,a,b,v,i,x,y,p,q;
Object contoursShifting(int[][] M) {
    var A=new int[m=M.length][n=M[0].length];
    for (c=-~(m>n?n:m)/2; i<c; i++) {
        x=y=i;
        p = m-i-1;
        q = n-i-1;
        do {
            v=M[a=x][b=y];
            if (x==i) {
                if (++y>q) {
                    y = q;
                    if (++x>p) {
                        x = p;
                        y = i;
                    }
                }
            }
            else if (y==q) {
                if (++x>p) {
                    x = p;
                    if (--y < i)
                        y = x = i;
                }
            }
            else if (x==p) {
                if (--y<i) {
                    y = i;
                    x--;
                }
            }
            else if (y==i)
                x--;
            if (i%2==0)
                A[x][y] = v;
            else
                A[a][b] = M[x][y];
        }
        while (x!=i | y!=i);
    }
    return A;
}

    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        int m = matrix.length;
        if (m == 0) return res;
        int n = matrix[0].length, x = 0, y = 0;
        char dir = 'R';
        int ulimit = 1, dlimit = m-1, llimit = 0, rlimit = n-1;
        for (int i=0; i<m*n; i++) {
            res.add(matrix[x][y]);
            switch (dir) {
                case 'R':
                    y += 1;
                    if (y > rlimit) {
                        y = rlimit;
                        x += 1;
                        rlimit--;
                        dir = 'D';
                    }
                    break;
                case 'D':
                    x += 1;
                    if (x > dlimit) {
                        x = dlimit;
                        y -= 1;
                        dlimit--;
                        dir = 'L';
                    }
                    break;
                case 'L':
                    y -= 1;
                    if (y < llimit) {
                        y = llimit;
                        x -= 1;
                        llimit++;
                        dir = 'U';
                    }
                    break;
                case 'U':
                    x -= 1;
                    if (x < ulimit) {
                        x = ulimit;
                        y += 1;
                        ulimit++;
                        dir = 'R';
                    }
            }
        }
        return res;
    }


  public List<Integer> spiralOrder(int[][] matrix) {
    List<Integer> result = new ArrayList<>();
    if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return result;
    int rowStart = 0, rowEnd = matrix.length - 1;
    int colStart = 0, colEnd = matrix[0].length - 1;
    while(rowStart <= rowEnd && colStart <= colEnd){
      for(int c = colStart; c <= colEnd; c++){
        result.add(matrix[rowStart][c]);
      }
      rowStart++;
      for(int r = rowStart; r <= rowEnd; r++){
        result.add(matrix[r][colEnd]);
      }
      colEnd--;
      if(rowStart <= rowEnd){
        for(int c = colEnd; c >= colStart; c--){
          result.add(matrix[rowEnd][c]);
        }
        rowEnd--;
      }
      if(colStart <= colEnd){
        for(int r = rowEnd; r >= rowStart; r--){
          result.add(matrix[r][colStart]);
        }
        colStart++;
      }
    }
    return result;
  }


    public List < Integer > spiralOrder(int[][] matrix) {
        List ans = new ArrayList();
        if (matrix.length == 0)
            return ans;
        int r1 = 0, r2 = matrix.length - 1;
        int c1 = 0, c2 = matrix[0].length - 1;
        while (r1 <= r2 && c1 <= c2) {
            for (int c = c1; c <= c2; c++) ans.add(matrix[r1][c]);
            for (int r = r1 + 1; r <= r2; r++) ans.add(matrix[r][c2]);
            if (r1 < r2 && c1 < c2) {
                for (int c = c2 - 1; c > c1; c--) ans.add(matrix[r2][c]);
                for (int r = r2; r > r1; r--) ans.add(matrix[r][c1]);
            }
            r1++;
            r2--;
            c1++;
            c2--;
        }
        return ans;
    }


    public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        int llimit = 0, rlimit = n, ulimit = 0, dlimit = n;
        int num = 1;
        while (llimit < rlimit && ulimit < dlimit) {
            for (int i=llimit; i<rlimit; i++)
                res[ulimit][i] = num++;
            for (int i=ulimit+1; i<dlimit; i++)
                res[i][rlimit-1] = num++;
            for (int i=rlimit-2; i>=llimit; i--)
                res[dlimit-1][i] = num++;
            for (int i=dlimit-2; i>ulimit; i--)
                res[i][llimit] = num++;
            ulimit++;
            dlimit--;
            llimit++;
            rlimit--;
        }
        return res;
    }


String spiralArrays(int N, int u) {
  int m=N, x=0, i=0, j=0, k, n = N*u;
  var A=new int[m][n];
  while (m>0) {
    for (k=0; k<n-1; k++)
      A[i][j++] = ++x;
    m--;
    for (k=0; k<m; k++)
      A[i++][j] = ++x;
    n--;
    for (k=0; m>0 && k<n; k++)
      A[i][j--] = ++x;
    for (k=0; k<m; k++)
      A[i--][j] = ++x;
    m--; n--;
    i++;
    j++;
  }
  if (A[i-1][j-1]<1)
    A[i-1][j-1] = ++x;
  var r="";
  for (i=0; i<u; i++) {
    k = i*N;
    for (var a: A)
      for (j=0; j<N; j++)
        r += a[k+j];
  }
  return r;
}
