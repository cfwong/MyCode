int combs(String comb1, String comb2) {


  class Helper {
    int getMask(String comb) {
      int mask = 0;
      for (int i = 0; i < comb.length(); i++) {
        char c = comb.charAt(i);
        mask = (mask << 1) + (c == '*' ? 1 : 0);
      }
      return mask;
    }
  }
  Helper h = new Helper();


  int m1 = h.getMask(comb1);
  int m2 = h.getMask(comb2);
  int len1 = comb1.length();
  int len2 = comb2.length();
  int answer = len1 + len2;
  for (int i = -len1; i <= len2; i++) {
    int tmp, length;
    if (i < 0) {
      tmp = m2 << -i & m1;
      length = Math.max(-i + len2, len1);
    } else {
      tmp = m1 << i & m2;
      length = Math.max(i + len1, len2);
    }
    if (tmp == 0 && answer > length) {
      answer = length;
    }
  }


  return answer;
}


int combs(String comb1, String comb2) {
  int mask1=0, mask2=0
  for (x in comb1)
    mask1 = (mask1 << 1) + (x=='*'? 1: 0)
  for (x in comb2)
    mask2 = (mask2 << 1) + (x=='*'? 1: 0)
  int len1 = comb1.size(), len2 = comb2.size()
  int min = len1 + len2;
  for (i in -len1..len2) {
    if (i < 0) { // shift comb2 left
      int x = mask2 << -i
      if ((x | mask1) == x + mask1)
        min = [min,[-i+len2,len1].max()].min()
    }
    else { // shift comb1 left
      int x = mask1 << i
      if ((x | mask2) == x + mask2)
        min = [min,[i+len1,len2].max()].min()
    }
  }
  return min
}
