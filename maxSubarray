  Maximum subarray sum
    static long maximumSum(long[] a, long m) {
        int i,j,l=a.length;
        long res = 0;
        for (i=0; i<l; i++) {
            a[i] %= m;
            res = Math.max(a[i],res);
        }
        for (i=1; i<l; i++) {
            for (j=0; j<i; j++) {
                a[j] = (a[i]+a[j])%m;
                res = Math.max(a[j],res);
            }
        }  
        return res;
    }
Using prefixSum and TreeSet (for sorted data):
    static long maximumSum(long[] a, long m) {
        Long res = 0L, temp;
        TreeSet<Long> set = new TreeSet<>();
        for (int i=0; i<a.length; i++) {
            a[i] = (a[i]+(i>0? a[i-1]: 0))%m;
            res = Math.max(res, a[i]);
            if ((temp = set.higher(a[i])) != null)
                res = Math.max(res, (a[i]-temp+m)%m);
            set.add(a[i]);
        }
        return res;
    }


int s,t;
int maxSubarray(int[] A) {
    for (int a: A) {
        s = Math.max(0,s+a);
        t = Math.max(t,s);
    }
    return t;
}
